Ravi discovered that some strings read the same forwards and backwards, which are called palindromes.
He noticed that every string he encountered has at least one palindromic substring. He wants to know how to find the longest palindromic substring in a given string, S.
Can you help him determine the length of this longest palindromic substring?
https://unstop.com/code/practice/250143

def longest_palindromic_substring_length(s):
    t = '#' + '#'.join(s) + '#'
    n = len(t)
    p = [0] * n
    center = right = 0
    max_len = 0

    for i in range(n):
        mirror = 2 * center - i
        if i < right:
            p[i] = min(right - i, p[mirror])
        
        a, b = i + p[i] + 1, i - p[i] - 1
        while a < n and b >= 0 and t[a] == t[b]:
            p[i] += 1
            a += 1
            b -= 1

        if i + p[i] > right:
            center = i
            right = i + p[i]

        max_len = max(max_len, p[i])

    return max_len

n = int(input())
s = input().strip()
print(longest_palindromic_substring_length(s))
